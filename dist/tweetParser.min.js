/*!
 * jquery Tweet Parser v1.3.1
 * Parse an element containing a tweet and turn URLS, @user & #hashtags into urls
 * License : MIT
 * author Vincent Loy <vincent.loy1@gmail.com>
 * http://vincent-loy.fr
 */
!function(t){"use strict";t.fn.tweetParser=function(s){var a={urlClass:"tweet_link",userClass:"tweet_user",hashtagClass:"hashtag",target:"_blank",searchWithHashtags:!0,parseUsers:!0,parseHashtags:!0,parseUrls:!0},e=t.extend(a,s);return this.each(function(){var s,a,r,h,c,l=t(this).html(),n=/(^|\s|>)((f|ht)tps?:\/\/([^ \t\r\n<]*[^ \t\r\n\<)*_,\.]))/g,i=/\B@([a-zA-Z0-9_]+)/g,u=/\B(#[á-úÁ-Úä-üÄ-Üa-zA-Z0-9_]+)/g;s=e.searchWithHashtags?"https://twitter.com/hashtag/":"https://twitter.com/search?q=",e.parseUrls&&(l=l.replace(n,function(t,s,r){return a=s+'<a href="'+r+'" class="'+e.urlClass+'">'+r+"</a>",t.replace(t,a)})),e.parseUsers&&(l=l.replace(i,function(t){return r=t.slice(1),a='<a href="http://twitter.com/'+r+'" class="'+e.userClass+'">'+t+"</a>",t.replace(t,a)})),e.parseHashtags&&(l=l.replace(u,function(t){return h=t.slice(1),c=s+h,a='<a href="'+c+'" class="'+e.hashtagClass+'">'+t+"</a>",t.replace(t,a)})),t(this).html(l),t(this).find("a").attr("target",e.target)})}}(jQuery);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR3ZWV0UGFyc2VyLmpzIl0sIm5hbWVzIjpbIiQiLCJmbiIsInR3ZWV0UGFyc2VyIiwib3B0aW9ucyIsImRlZmF1dHMiLCJ1cmxDbGFzcyIsInVzZXJDbGFzcyIsImhhc2h0YWdDbGFzcyIsInRhcmdldCIsInNlYXJjaFdpdGhIYXNodGFncyIsInBhcnNlVXNlcnMiLCJwYXJzZUhhc2h0YWdzIiwicGFyc2VVcmxzIiwicGFyYW1ldGVycyIsImV4dGVuZCIsInRoaXMiLCJlYWNoIiwic2VhcmNobGluayIsImxpbmsiLCJ1c2VyT25seSIsImhhc2h0YWdPbmx5IiwidXJsIiwidHdlZXQiLCJodG1sIiwicmVnZXhVcmwiLCJyZWdleFVzZXIiLCJyZWdleEhhc2h0YWciLCJyZXBsYWNlIiwicDEiLCJwMiIsInVzZXIiLCJzbGljZSIsImhhc2h0YWciLCJmaW5kIiwiYXR0ciIsImpRdWVyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztDQVNDLFNBQVVBLEdBQ1AsWUFFQUEsR0FBRUMsR0FBR0MsWUFBYyxTQUFVQyxHQUV6QixHQUFJQyxJQUNJQyxTQUFZLGFBQ1pDLFVBQWEsYUFDYkMsYUFBZ0IsVUFDaEJDLE9BQVUsU0FDVkMsb0JBQXNCLEVBQ3RCQyxZQUFjLEVBQ2RDLGVBQWlCLEVBQ2pCQyxXQUFhLEdBRWpCQyxFQUFhYixFQUFFYyxPQUFPVixFQUFTRCxFQUduQyxPQUFPWSxNQUFLQyxLQUFLLFdBR2IsR0FDSUMsR0FDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFMQUMsRUFBUXRCLEVBQUVlLE1BQU1RLE9BT2hCQyxFQUFXLDZEQUNYQyxFQUFZLHNCQUNaQyxFQUFlLGlDQUtmVCxHQUZBSixFQUFXSixtQkFFRSwrQkFHQSxnQ0FJYkksRUFBV0QsWUFDWFUsRUFBUUEsRUFBTUssUUFBUUgsRUFBVSxTQUFVSCxFQUFLTyxFQUFJQyxHQUUvQyxNQURBWCxHQUFPVSxFQUFLLFlBQWNDLEVBQUssWUFBY2hCLEVBQVdSLFNBQVcsS0FBT3dCLEVBQUssT0FDeEVSLEVBQUlNLFFBQVFOLEVBQUtILE1BSzVCTCxFQUFXSCxhQUNYWSxFQUFRQSxFQUFNSyxRQUFRRixFQUFXLFNBQVVLLEdBR3ZDLE1BRkFYLEdBQVdXLEVBQUtDLE1BQU0sR0FDdEJiLEVBQU8sK0JBQWlDQyxFQUFXLFlBQWNOLEVBQVdQLFVBQVksS0FBT3dCLEVBQU8sT0FDL0ZBLEVBQUtILFFBQVFHLEVBQU1aLE1BSzlCTCxFQUFXRixnQkFDWFcsRUFBUUEsRUFBTUssUUFBUUQsRUFBYyxTQUFVTSxHQUkxQyxNQUhBWixHQUFjWSxFQUFRRCxNQUFNLEdBQzVCVixFQUFNSixFQUFhRyxFQUNuQkYsRUFBTyxZQUFjRyxFQUFNLFlBQWNSLEVBQVdOLGFBQWUsS0FBT3lCLEVBQVUsT0FDN0VBLEVBQVFMLFFBQVFLLEVBQVNkLE1BS3hDbEIsRUFBRWUsTUFBTVEsS0FBS0QsR0FHYnRCLEVBQUVlLE1BQU1rQixLQUFLLEtBQUtDLEtBQUssU0FBVXJCLEVBQVdMLFlBSXREMkIiLCJmaWxlIjoidHdlZXRQYXJzZXIubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBqcXVlcnkgVHdlZXQgUGFyc2VyIHYxLjMuMVxuICogUGFyc2UgYW4gZWxlbWVudCBjb250YWluaW5nIGEgdHdlZXQgYW5kIHR1cm4gVVJMUywgQHVzZXIgJiAjaGFzaHRhZ3MgaW50byB1cmxzXG4gKiBMaWNlbnNlIDogTUlUXG4gKiBhdXRob3IgVmluY2VudCBMb3kgPHZpbmNlbnQubG95MUBnbWFpbC5jb20+XG4gKiBodHRwOi8vdmluY2VudC1sb3kuZnJcbiAqL1xuXG4vKmdsb2JhbCAkLCBqUXVlcnkqL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAkLmZuLnR3ZWV0UGFyc2VyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuICAgICAgICB2YXIgZGVmYXV0cyA9IHtcbiAgICAgICAgICAgICAgICBcInVybENsYXNzXCI6IFwidHdlZXRfbGlua1wiLFxuICAgICAgICAgICAgICAgIFwidXNlckNsYXNzXCI6IFwidHdlZXRfdXNlclwiLFxuICAgICAgICAgICAgICAgIFwiaGFzaHRhZ0NsYXNzXCI6IFwiaGFzaHRhZ1wiLFxuICAgICAgICAgICAgICAgIFwidGFyZ2V0XCI6IFwiX2JsYW5rXCIsXG4gICAgICAgICAgICAgICAgXCJzZWFyY2hXaXRoSGFzaHRhZ3NcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInBhcnNlVXNlcnNcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInBhcnNlSGFzaHRhZ3NcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInBhcnNlVXJsc1wiOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFyYW1ldGVycyA9ICQuZXh0ZW5kKGRlZmF1dHMsIG9wdGlvbnMpO1xuXG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIC8vY29udGFpbiB0aGUgdHdlZXRcbiAgICAgICAgICAgIHZhciB0d2VldCA9ICQodGhpcykuaHRtbCgpLFxuICAgICAgICAgICAgICAgIHNlYXJjaGxpbmssIC8vc2VhcmNoIGxpbmsgZm9yIGhhc2h0YWdcbiAgICAgICAgICAgICAgICBsaW5rLCAvL2h0bWwgPGE+IHRhZ1xuICAgICAgICAgICAgICAgIHVzZXJPbmx5LCAvL3VzZXJzIG9uIHR3ZWV0XG4gICAgICAgICAgICAgICAgaGFzaHRhZ09ubHksIC8vaGFzaHRhZ3Mgb24gdHdlZXRcbiAgICAgICAgICAgICAgICB1cmwsIC8vdXJsIHRvIGhhc2h0YWcgc2VhcmNoXG4gICAgICAgICAgICAvL3JlZ2V4XG4gICAgICAgICAgICAgICAgcmVnZXhVcmwgPSAvKF58XFxzfD4pKChmfGh0KXRwcz86XFwvXFwvKFteIFxcdFxcclxcbjxdKlteIFxcdFxcclxcblxcPCkqXyxcXC5dKSkvZywgLy9yZWdleCBmb3IgdXJsc1xuICAgICAgICAgICAgICAgIHJlZ2V4VXNlciA9IC9cXEJAKFthLXpBLVowLTlfXSspL2csIC8vcmVnZXggZm9yIEB1c2Vyc1xuICAgICAgICAgICAgICAgIHJlZ2V4SGFzaHRhZyA9IC9cXEIoI1vDoS3DusOBLcOaw6Qtw7zDhC3DnGEtekEtWjAtOV9dKykvZzsgLy9yZWdleCBmb3IgI2hhc2h0YWdzXG5cbiAgICAgICAgICAgIC8vSGFzaHRhZyBTZWFyY2ggbGlua1xuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMuc2VhcmNoV2l0aEhhc2h0YWdzKSB7XG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIHRoZSBzZWFyY2ggd2l0aCBoYXNodGFnXG4gICAgICAgICAgICAgICAgc2VhcmNobGluayA9IFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9oYXNodGFnL1wiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL3RoaXMgaXMgYSBtb3JlIGdsb2JhbCBzZWFyY2ggaW5jbHVkaW5nIGhhc2h0YWdzIGFuZCB0aGUgd29yZCBpdHNlbGZcbiAgICAgICAgICAgICAgICBzZWFyY2hsaW5rID0gXCJodHRwczovL3R3aXR0ZXIuY29tL3NlYXJjaD9xPVwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3R1cm4gVVJMUyBpbiB0aGUgdHdlZXQgaW50by4uLiB3b3JraW5nIHVybHNcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLnBhcnNlVXJscykge1xuICAgICAgICAgICAgICAgIHR3ZWV0ID0gdHdlZXQucmVwbGFjZShyZWdleFVybCwgZnVuY3Rpb24gKHVybCwgcDEsIHAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmsgPSBwMSArICc8YSBocmVmPVwiJyArIHAyICsgJ1wiIGNsYXNzPVwiJyArIHBhcmFtZXRlcnMudXJsQ2xhc3MgKyAnXCI+JyArIHAyICsgJzwvYT4nO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXJsLnJlcGxhY2UodXJsLCBsaW5rKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy90dXJuIEB1c2VycyBpbiB0aGUgdHdlZXQgaW50by4uLiB3b3JraW5nIHVybHNcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLnBhcnNlVXNlcnMpIHtcbiAgICAgICAgICAgICAgICB0d2VldCA9IHR3ZWV0LnJlcGxhY2UocmVnZXhVc2VyLCBmdW5jdGlvbiAodXNlcikge1xuICAgICAgICAgICAgICAgICAgICB1c2VyT25seSA9IHVzZXIuc2xpY2UoMSk7XG4gICAgICAgICAgICAgICAgICAgIGxpbmsgPSAnPGEgaHJlZj1cImh0dHA6Ly90d2l0dGVyLmNvbS8nICsgdXNlck9ubHkgKyAnXCIgY2xhc3M9XCInICsgcGFyYW1ldGVycy51c2VyQ2xhc3MgKyAnXCI+JyArIHVzZXIgKyAnPC9hPic7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1c2VyLnJlcGxhY2UodXNlciwgbGluayk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vdHVybiAjaGFzaHRhZ3MgaW4gdGhlIHR3ZWV0IGludG8uLi4gd29ya2luZyB1cmxzXG4gICAgICAgICAgICBpZiAocGFyYW1ldGVycy5wYXJzZUhhc2h0YWdzKSB7XG4gICAgICAgICAgICAgICAgdHdlZXQgPSB0d2VldC5yZXBsYWNlKHJlZ2V4SGFzaHRhZywgZnVuY3Rpb24gKGhhc2h0YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFzaHRhZ09ubHkgPSBoYXNodGFnLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgICAgICB1cmwgPSBzZWFyY2hsaW5rICsgaGFzaHRhZ09ubHk7XG4gICAgICAgICAgICAgICAgICAgIGxpbmsgPSAnPGEgaHJlZj1cIicgKyB1cmwgKyAnXCIgY2xhc3M9XCInICsgcGFyYW1ldGVycy5oYXNodGFnQ2xhc3MgKyAnXCI+JyArIGhhc2h0YWcgKyAnPC9hPic7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoYXNodGFnLnJlcGxhY2UoaGFzaHRhZywgbGluayk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vdGhlbiwgaXQgaW5qZWN0IHRoZSBsYXN0IHZhciBpbnRvIHRoZSBlbGVtZW50IGNvbnRhaW5pbmcgdGhlIHR3ZWV0XG4gICAgICAgICAgICAkKHRoaXMpLmh0bWwodHdlZXQpO1xuXG4gICAgICAgICAgICAvL2FkZCB0YXJnZXQgYXR0cmlidXRlIHRvIGFsbCB1cmxzXG4gICAgICAgICAgICAkKHRoaXMpLmZpbmQoXCJhXCIpLmF0dHIoXCJ0YXJnZXRcIiwgcGFyYW1ldGVycy50YXJnZXQpO1xuXG4gICAgICAgIH0pO1xuICAgIH07XG59KGpRdWVyeSkpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9