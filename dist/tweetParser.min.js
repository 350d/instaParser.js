/*!
 * tweetParser.js v2.0.1
 * Small Javascript Library that parse an element containing a tweet and turn URLS, @user & #hashtags into urls
 * License : MIT
 * author Vincent Loy <vincent.loy1@gmail.com>
 * http://vincent-loy.fr
 */
!function(t){"use strict";var e,r;r=function(t){var e,r;for(t=t||{},e=1;e<arguments.length;e+=1)if(arguments[e])for(r in arguments[e])arguments[e].hasOwnProperty(r)&&(t[r]=arguments[e][r]);return t},e=function(t,e){var a=document.querySelectorAll(t),s=r({urlClass:"tweet_link",userClass:"tweet_user",hashtagClass:"hashtag",target:"_blank",searchWithHashtags:!0,parseUsers:!0,parseHashtags:!0,parseUrls:!0},e);Array.prototype.forEach.call(a,function(t){var e,r,a,n=t.innerHTML,c=/(f|ht)tps?:\/\/([^\s\t\r\n<]*[^\s\t\r\n<)*_,\.])/g,l=/\B@([a-zA-Z0-9_]+)/g,u=/\B(#[á-úÁ-Úä-üÄ-Üa-zA-Z0-9_]+)/g;e=s.searchWithHashtags?"https://twitter.com/hashtag/":"https://twitter.com/search?q=",s.parseUrls&&(n=n.replace(c,function(t){return r=document.createElement("a"),r.href=t,r.classList.add(s.urlClass),r.textContent=t,t.replace(t,r.outerHTML)})),s.parseUsers&&(n=n.replace(l,function(t){var e=t.slice(1);return r=document.createElement("a"),r.href="http://twitter.com/"+e,r.classList.add(s.userClass),r.textContent=t,t.replace(t,r.outerHTML)})),s.parseHashtags&&(n=n.replace(u,function(t){var n=t.slice(1);return a=e+n,r=document.createElement("a"),r.href=a,r.classList.add(s.hashtagClass),r.textContent=t,t.replace(t,r.outerHTML)})),t.innerHTML=n})},t.tweetParser=e}(window);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR3ZWV0UGFyc2VyLmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJ0d2VldFBhcnNlciIsImV4dGVuZCIsIm91dCIsImkiLCJrZXkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJoYXNPd25Qcm9wZXJ0eSIsImVsZW1lbnQiLCJhcmdzIiwiZWx0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicGFyYW1ldGVycyIsInVybENsYXNzIiwidXNlckNsYXNzIiwiaGFzaHRhZ0NsYXNzIiwidGFyZ2V0Iiwic2VhcmNoV2l0aEhhc2h0YWdzIiwicGFyc2VVc2VycyIsInBhcnNlSGFzaHRhZ3MiLCJwYXJzZVVybHMiLCJBcnJheSIsInByb3RvdHlwZSIsImZvckVhY2giLCJjYWxsIiwiZWwiLCJzZWFyY2hsaW5rIiwibGluayIsInVybCIsInR3ZWV0IiwiaW5uZXJIVE1MIiwicmVnZXhVcmwiLCJyZWdleFVzZXIiLCJyZWdleEhhc2h0YWciLCJyZXBsYWNlIiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0ZXh0Q29udGVudCIsIm91dGVySFRNTCIsInVzZXIiLCJ1c2VyT25seSIsInNsaWNlIiwiaGFzaHRhZyIsImhhc2h0YWdPbmx5Iiwid2luZG93Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0NBV0MsU0FBVUEsR0FDUCxZQUdBLElBQUlDLEdBR0FDLENBRUpBLEdBQVMsU0FBVUMsR0FDZixHQUFJQyxHQUNBQyxDQUlKLEtBRkFGLEVBQU1BLE1BRURDLEVBQUksRUFBR0EsRUFBSUUsVUFBVUMsT0FBUUgsR0FBSyxFQUNuQyxHQUFJRSxVQUFVRixHQUNWLElBQUtDLElBQU9DLFdBQVVGLEdBQ2RFLFVBQVVGLEdBQUdJLGVBQWVILEtBQzVCRixFQUFJRSxHQUFPQyxVQUFVRixHQUFHQyxHQUt4QyxPQUFPRixJQUdYRixFQUFjLFNBQVVRLEVBQVNDLEdBQzdCLEdBQUlDLEdBQU1DLFNBQVNDLGlCQUFpQkosR0FDaENLLEVBQWFaLEdBQ1RhLFNBQVUsYUFDVkMsVUFBVyxhQUNYQyxhQUFjLFVBQ2RDLE9BQVEsU0FDUkMsb0JBQW9CLEVBQ3BCQyxZQUFZLEVBQ1pDLGVBQWUsRUFDZkMsV0FBVyxHQUNaWixFQUVQYSxPQUFNQyxVQUFVQyxRQUFRQyxLQUFLZixFQUFLLFNBQVVnQixHQUV4QyxHQUNJQyxHQUNBQyxFQUNBQyxFQUhBQyxFQUFRSixFQUFHSyxVQU9YQyxFQUFXLG9EQUNYQyxFQUFZLHNCQUNaQyxFQUFlLGlDQUtmUCxHQUZBZCxFQUFXSyxtQkFFRSwrQkFHQSxnQ0FJYkwsRUFBV1EsWUFDWFMsRUFBUUEsRUFBTUssUUFBUUgsRUFBVSxTQUFVSCxHQU10QyxNQUxBRCxHQUFPakIsU0FBU3lCLGNBQWMsS0FDOUJSLEVBQUtTLEtBQU9SLEVBQ1pELEVBQUtVLFVBQVVDLElBQUkxQixFQUFXQyxVQUM5QmMsRUFBS1ksWUFBY1gsRUFFWkEsRUFBSU0sUUFBUU4sRUFBS0QsRUFBS2EsY0FLakM1QixFQUFXTSxhQUNYVyxFQUFRQSxFQUFNSyxRQUFRRixFQUFXLFNBQVVTLEdBQ3ZDLEdBQUlDLEdBQVdELEVBQUtFLE1BQU0sRUFPMUIsT0FMQWhCLEdBQU9qQixTQUFTeUIsY0FBYyxLQUM5QlIsRUFBS1MsS0FBTyxzQkFBd0JNLEVBQ3BDZixFQUFLVSxVQUFVQyxJQUFJMUIsRUFBV0UsV0FDOUJhLEVBQUtZLFlBQWNFLEVBRVpBLEVBQUtQLFFBQVFPLEVBQU1kLEVBQUthLGNBS25DNUIsRUFBV08sZ0JBQ1hVLEVBQVFBLEVBQU1LLFFBQVFELEVBQWMsU0FBVVcsR0FDMUMsR0FBSUMsR0FBY0QsRUFBUUQsTUFBTSxFQVFoQyxPQU5BZixHQUFNRixFQUFhbUIsRUFDbkJsQixFQUFPakIsU0FBU3lCLGNBQWMsS0FDOUJSLEVBQUtTLEtBQU9SLEVBQ1pELEVBQUtVLFVBQVVDLElBQUkxQixFQUFXRyxjQUM5QlksRUFBS1ksWUFBY0ssRUFFWkEsRUFBUVYsUUFBUVUsRUFBU2pCLEVBQUthLGNBSzdDZixFQUFHSyxVQUFZRCxLQUl2Qi9CLEVBQVFDLFlBQWNBLEdBQ3hCK0MiLCJmaWxlIjoidHdlZXRQYXJzZXIubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiB0d2VldFBhcnNlci5qcyB2Mi4wLjFcbiAqIFNtYWxsIEphdmFzY3JpcHQgTGlicmFyeSB0aGF0IHBhcnNlIGFuIGVsZW1lbnQgY29udGFpbmluZyBhIHR3ZWV0IGFuZCB0dXJuIFVSTFMsIEB1c2VyICYgI2hhc2h0YWdzIGludG8gdXJsc1xuICogTGljZW5zZSA6IE1JVFxuICogYXV0aG9yIFZpbmNlbnQgTG95IDx2aW5jZW50LmxveTFAZ21haWwuY29tPlxuICogaHR0cDovL3ZpbmNlbnQtbG95LmZyXG4gKi9cblxuLypnbG9iYWwgd2luZG93LCBkb2N1bWVudCovXG4vKmpzbGludCByZWdleHA6IHRydWUqL1xuXG4oZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvLyBDbGFzc1xuICAgIHZhciB0d2VldFBhcnNlcixcblxuICAgIC8vIGZ1bmN0aW9uc1xuICAgICAgICBleHRlbmQ7XG5cbiAgICBleHRlbmQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAga2V5O1xuXG4gICAgICAgIG91dCA9IG91dCB8fCB7fTtcblxuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldKSB7XG4gICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gYXJndW1lbnRzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0W2tleV0gPSBhcmd1bWVudHNbaV1ba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH07XG5cbiAgICB0d2VldFBhcnNlciA9IGZ1bmN0aW9uIChlbGVtZW50LCBhcmdzKSB7XG4gICAgICAgIHZhciBlbHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1lbnQpLFxuICAgICAgICAgICAgcGFyYW1ldGVycyA9IGV4dGVuZCh7XG4gICAgICAgICAgICAgICAgdXJsQ2xhc3M6ICd0d2VldF9saW5rJyxcbiAgICAgICAgICAgICAgICB1c2VyQ2xhc3M6ICd0d2VldF91c2VyJyxcbiAgICAgICAgICAgICAgICBoYXNodGFnQ2xhc3M6ICdoYXNodGFnJyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6ICdfYmxhbmsnLFxuICAgICAgICAgICAgICAgIHNlYXJjaFdpdGhIYXNodGFnczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXJzZVVzZXJzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhcnNlSGFzaHRhZ3M6IHRydWUsXG4gICAgICAgICAgICAgICAgcGFyc2VVcmxzOiB0cnVlXG4gICAgICAgICAgICB9LCBhcmdzKTtcblxuICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVsdCwgZnVuY3Rpb24gKGVsKSB7XG5cbiAgICAgICAgICAgIHZhciB0d2VldCA9IGVsLmlubmVySFRNTCxcbiAgICAgICAgICAgICAgICBzZWFyY2hsaW5rLCAvL3NlYXJjaCBsaW5rIGZvciBoYXNodGFnc1xuICAgICAgICAgICAgICAgIGxpbmssIC8vaHRtbCA8YT4gdGFnXG4gICAgICAgICAgICAgICAgdXJsLCAvL3VybCB0byBoYXNodGFncyBzZWFyY2hcblxuXG4gICAgICAgICAgICAvL3JlZ2V4XG4gICAgICAgICAgICAgICAgcmVnZXhVcmwgPSAvKGZ8aHQpdHBzPzpcXC9cXC8oW15cXHNcXHRcXHJcXG48XSpbXlxcc1xcdFxcclxcbjwpKl8sXFwuXSkvZywgLy9yZWdleCBmb3IgdXJsc1xuICAgICAgICAgICAgICAgIHJlZ2V4VXNlciA9IC9cXEJAKFthLXpBLVowLTlfXSspL2csIC8vcmVnZXggZm9yIEB1c2Vyc1xuICAgICAgICAgICAgICAgIHJlZ2V4SGFzaHRhZyA9IC9cXEIoI1vDoS3DusOBLcOaw6Qtw7zDhC3DnGEtekEtWjAtOV9dKykvZzsgLy9yZWdleCBmb3IgI2hhc2h0YWdzXG5cbiAgICAgICAgICAgIC8vSGFzaHRhZyBTZWFyY2ggbGlua1xuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMuc2VhcmNoV2l0aEhhc2h0YWdzKSB7XG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIHRoZSBzZWFyY2ggd2l0aCBoYXNodGFnXG4gICAgICAgICAgICAgICAgc2VhcmNobGluayA9IFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9oYXNodGFnL1wiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL3RoaXMgaXMgYSBtb3JlIGdsb2JhbCBzZWFyY2ggaW5jbHVkaW5nIGhhc2h0YWdzIGFuZCB0aGUgd29yZCBpdHNlbGZcbiAgICAgICAgICAgICAgICBzZWFyY2hsaW5rID0gXCJodHRwczovL3R3aXR0ZXIuY29tL3NlYXJjaD9xPVwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3R1cm4gVVJMUyBpbiB0aGUgdHdlZXQgaW50by4uLiB3b3JraW5nIHVybHNcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLnBhcnNlVXJscykge1xuICAgICAgICAgICAgICAgIHR3ZWV0ID0gdHdlZXQucmVwbGFjZShyZWdleFVybCwgZnVuY3Rpb24gKHVybCkge1xuICAgICAgICAgICAgICAgICAgICBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgICAgICAgICBsaW5rLmhyZWYgPSB1cmw7XG4gICAgICAgICAgICAgICAgICAgIGxpbmsuY2xhc3NMaXN0LmFkZChwYXJhbWV0ZXJzLnVybENsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgbGluay50ZXh0Q29udGVudCA9IHVybDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXJsLnJlcGxhY2UodXJsLCBsaW5rLm91dGVySFRNTCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vdHVybiBAdXNlcnMgaW4gdGhlIHR3ZWV0IGludG8uLi4gd29ya2luZyB1cmxzXG4gICAgICAgICAgICBpZiAocGFyYW1ldGVycy5wYXJzZVVzZXJzKSB7XG4gICAgICAgICAgICAgICAgdHdlZXQgPSB0d2VldC5yZXBsYWNlKHJlZ2V4VXNlciwgZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJPbmx5ID0gdXNlci5zbGljZSgxKTtcblxuICAgICAgICAgICAgICAgICAgICBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgICAgICAgICBsaW5rLmhyZWYgPSAnaHR0cDovL3R3aXR0ZXIuY29tLycgKyB1c2VyT25seTtcbiAgICAgICAgICAgICAgICAgICAgbGluay5jbGFzc0xpc3QuYWRkKHBhcmFtZXRlcnMudXNlckNsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgbGluay50ZXh0Q29udGVudCA9IHVzZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXIucmVwbGFjZSh1c2VyLCBsaW5rLm91dGVySFRNTCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vdHVybiAjaGFzaHRhZ3MgaW4gdGhlIHR3ZWV0IGludG8uLi4gd29ya2luZyB1cmxzXG4gICAgICAgICAgICBpZiAocGFyYW1ldGVycy5wYXJzZUhhc2h0YWdzKSB7XG4gICAgICAgICAgICAgICAgdHdlZXQgPSB0d2VldC5yZXBsYWNlKHJlZ2V4SGFzaHRhZywgZnVuY3Rpb24gKGhhc2h0YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc2h0YWdPbmx5ID0gaGFzaHRhZy5zbGljZSgxKTtcblxuICAgICAgICAgICAgICAgICAgICB1cmwgPSBzZWFyY2hsaW5rICsgaGFzaHRhZ09ubHk7XG4gICAgICAgICAgICAgICAgICAgIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICAgICAgICAgIGxpbmsuaHJlZiA9IHVybDtcbiAgICAgICAgICAgICAgICAgICAgbGluay5jbGFzc0xpc3QuYWRkKHBhcmFtZXRlcnMuaGFzaHRhZ0NsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgbGluay50ZXh0Q29udGVudCA9IGhhc2h0YWc7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhc2h0YWcucmVwbGFjZShoYXNodGFnLCBsaW5rLm91dGVySFRNTCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vdGhlbiwgaXQgaW5qZWN0IHRoZSBsYXN0IHZhciBpbnRvIHRoZSBlbGVtZW50IGNvbnRhaW5pbmcgdGhlIHR3ZWV0XG4gICAgICAgICAgICBlbC5pbm5lckhUTUwgPSB0d2VldDtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGV4cG9ydHMudHdlZXRQYXJzZXIgPSB0d2VldFBhcnNlcjtcbn0od2luZG93KSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=