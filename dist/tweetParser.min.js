/*!
 * tweetParser.js v2.0.0
 * Small Javascript Library that parse an element containing a tweet and turn URLS, @user & #hashtags into urls
 * License : MIT
 * author Vincent Loy <vincent.loy1@gmail.com>
 * http://vincent-loy.fr
 */
!function(e){"use strict";var t,r;r=function(e){var t,r;for(e=e||{},t=1;t<arguments.length;t+=1)if(arguments[t])for(r in arguments[t])arguments[t].hasOwnProperty(r)&&(e[r]=arguments[t][r]);return e},t=function(e,t){var a=document.querySelectorAll(e),s=r({urlClass:"tweet_link",userClass:"tweet_user",hashtagClass:"hashtag",target:"_blank",searchWithHashtags:!0,parseUsers:!0,parseHashtags:!0,parseUrls:!0},t);Array.prototype.forEach.call(a,function(e){var t,r,a,n=e.innerHTML,c=/(f|ht)tps?:\/\/([^\s\t\r\n<]*[^\s\t\r\n<)*_,\.])/g,l=/\B@([a-zA-Z0-9_]+)/g,u=/\B(#[á-úÁ-Úä-üÄ-Üa-zA-Z0-9_]+)/g;t=s.searchWithHashtags?"https://twitter.com/hashtag/":"https://twitter.com/search?q=",s.parseUrls&&(n=n.replace(c,function(e){return r=document.createElement("a"),r.href=e,r.classList.add(s.urlClass),r.innerText=e,e.replace(e,r.outerHTML)})),s.parseUsers&&(n=n.replace(l,function(e){var t=e.slice(1);return r=document.createElement("a"),r.href="http://twitter.com/"+t,r.classList.add(s.userClass),r.innerText=e,e.replace(e,r.outerHTML)})),s.parseHashtags&&(n=n.replace(u,function(e){var n=e.slice(1);return a=t+n,r=document.createElement("a"),r.href=a,r.classList.add(s.hashtagClass),r.innerText=e,e.replace(e,r.outerHTML)})),e.innerHTML=n})},e.tweetParser=t}(window);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR3ZWV0UGFyc2VyLmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJ0d2VldFBhcnNlciIsImV4dGVuZCIsIm91dCIsImkiLCJrZXkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJoYXNPd25Qcm9wZXJ0eSIsImVsZW1lbnQiLCJhcmdzIiwiZWx0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicGFyYW1ldGVycyIsInVybENsYXNzIiwidXNlckNsYXNzIiwiaGFzaHRhZ0NsYXNzIiwidGFyZ2V0Iiwic2VhcmNoV2l0aEhhc2h0YWdzIiwicGFyc2VVc2VycyIsInBhcnNlSGFzaHRhZ3MiLCJwYXJzZVVybHMiLCJBcnJheSIsInByb3RvdHlwZSIsImZvckVhY2giLCJjYWxsIiwiZWwiLCJzZWFyY2hsaW5rIiwibGluayIsInVybCIsInR3ZWV0IiwiaW5uZXJIVE1MIiwicmVnZXhVcmwiLCJyZWdleFVzZXIiLCJyZWdleEhhc2h0YWciLCJyZXBsYWNlIiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJjbGFzc0xpc3QiLCJhZGQiLCJpbm5lclRleHQiLCJvdXRlckhUTUwiLCJ1c2VyIiwidXNlck9ubHkiLCJzbGljZSIsImhhc2h0YWciLCJoYXNodGFnT25seSIsIndpbmRvdyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztDQVdDLFNBQVVBLEdBQ1AsWUFHQSxJQUFJQyxHQUdBQyxDQUVKQSxHQUFTLFNBQVVDLEdBQ2YsR0FBSUMsR0FDQUMsQ0FJSixLQUZBRixFQUFNQSxNQUVEQyxFQUFJLEVBQUdBLEVBQUlFLFVBQVVDLE9BQVFILEdBQUssRUFDbkMsR0FBSUUsVUFBVUYsR0FDVixJQUFLQyxJQUFPQyxXQUFVRixHQUNkRSxVQUFVRixHQUFHSSxlQUFlSCxLQUM1QkYsRUFBSUUsR0FBT0MsVUFBVUYsR0FBR0MsR0FLeEMsT0FBT0YsSUFHWEYsRUFBYyxTQUFVUSxFQUFTQyxHQUM3QixHQUFJQyxHQUFNQyxTQUFTQyxpQkFBaUJKLEdBQ2hDSyxFQUFhWixHQUNUYSxTQUFVLGFBQ1ZDLFVBQVcsYUFDWEMsYUFBYyxVQUNkQyxPQUFRLFNBQ1JDLG9CQUFvQixFQUNwQkMsWUFBWSxFQUNaQyxlQUFlLEVBQ2ZDLFdBQVcsR0FDWlosRUFFUGEsT0FBTUMsVUFBVUMsUUFBUUMsS0FBS2YsRUFBSyxTQUFVZ0IsR0FFeEMsR0FDSUMsR0FDQUMsRUFDQUMsRUFIQUMsRUFBUUosRUFBR0ssVUFPWEMsRUFBVyxvREFDWEMsRUFBWSxzQkFDWkMsRUFBZSxpQ0FLZlAsR0FGQWQsRUFBV0ssbUJBRUUsK0JBR0EsZ0NBSWJMLEVBQVdRLFlBQ1hTLEVBQVFBLEVBQU1LLFFBQVFILEVBQVUsU0FBVUgsR0FNdEMsTUFMQUQsR0FBT2pCLFNBQVN5QixjQUFjLEtBQzlCUixFQUFLUyxLQUFPUixFQUNaRCxFQUFLVSxVQUFVQyxJQUFJMUIsRUFBV0MsVUFDOUJjLEVBQUtZLFVBQVlYLEVBRVZBLEVBQUlNLFFBQVFOLEVBQUtELEVBQUthLGNBS2pDNUIsRUFBV00sYUFDWFcsRUFBUUEsRUFBTUssUUFBUUYsRUFBVyxTQUFVUyxHQUN2QyxHQUFJQyxHQUFXRCxFQUFLRSxNQUFNLEVBTzFCLE9BTEFoQixHQUFPakIsU0FBU3lCLGNBQWMsS0FDOUJSLEVBQUtTLEtBQU8sc0JBQXdCTSxFQUNwQ2YsRUFBS1UsVUFBVUMsSUFBSTFCLEVBQVdFLFdBQzlCYSxFQUFLWSxVQUFZRSxFQUVWQSxFQUFLUCxRQUFRTyxFQUFNZCxFQUFLYSxjQUtuQzVCLEVBQVdPLGdCQUNYVSxFQUFRQSxFQUFNSyxRQUFRRCxFQUFjLFNBQVVXLEdBQzFDLEdBQUlDLEdBQWNELEVBQVFELE1BQU0sRUFRaEMsT0FOQWYsR0FBTUYsRUFBYW1CLEVBQ25CbEIsRUFBT2pCLFNBQVN5QixjQUFjLEtBQzlCUixFQUFLUyxLQUFPUixFQUNaRCxFQUFLVSxVQUFVQyxJQUFJMUIsRUFBV0csY0FDOUJZLEVBQUtZLFVBQVlLLEVBRVZBLEVBQVFWLFFBQVFVLEVBQVNqQixFQUFLYSxjQUs3Q2YsRUFBR0ssVUFBWUQsS0FJdkIvQixFQUFRQyxZQUFjQSxHQUN4QitDIiwiZmlsZSI6InR3ZWV0UGFyc2VyLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogdHdlZXRQYXJzZXIuanMgdjIuMC4wXG4gKiBTbWFsbCBKYXZhc2NyaXB0IExpYnJhcnkgdGhhdCBwYXJzZSBhbiBlbGVtZW50IGNvbnRhaW5pbmcgYSB0d2VldCBhbmQgdHVybiBVUkxTLCBAdXNlciAmICNoYXNodGFncyBpbnRvIHVybHNcbiAqIExpY2Vuc2UgOiBNSVRcbiAqIGF1dGhvciBWaW5jZW50IExveSA8dmluY2VudC5sb3kxQGdtYWlsLmNvbT5cbiAqIGh0dHA6Ly92aW5jZW50LWxveS5mclxuICovXG5cbi8qZ2xvYmFsIHdpbmRvdywgZG9jdW1lbnQqL1xuLypqc2xpbnQgcmVnZXhwOiB0cnVlKi9cblxuKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8gQ2xhc3NcbiAgICB2YXIgdHdlZXRQYXJzZXIsXG5cbiAgICAvLyBmdW5jdGlvbnNcbiAgICAgICAgZXh0ZW5kO1xuXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGtleTtcblxuICAgICAgICBvdXQgPSBvdXQgfHwge307XG5cbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSkge1xuICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIGFyZ3VtZW50c1tpXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dFtrZXldID0gYXJndW1lbnRzW2ldW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuXG4gICAgdHdlZXRQYXJzZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgYXJncykge1xuICAgICAgICB2YXIgZWx0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbGVtZW50KSxcbiAgICAgICAgICAgIHBhcmFtZXRlcnMgPSBleHRlbmQoe1xuICAgICAgICAgICAgICAgIHVybENsYXNzOiAndHdlZXRfbGluaycsXG4gICAgICAgICAgICAgICAgdXNlckNsYXNzOiAndHdlZXRfdXNlcicsXG4gICAgICAgICAgICAgICAgaGFzaHRhZ0NsYXNzOiAnaGFzaHRhZycsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiAnX2JsYW5rJyxcbiAgICAgICAgICAgICAgICBzZWFyY2hXaXRoSGFzaHRhZ3M6IHRydWUsXG4gICAgICAgICAgICAgICAgcGFyc2VVc2VyczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXJzZUhhc2h0YWdzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhcnNlVXJsczogdHJ1ZVxuICAgICAgICAgICAgfSwgYXJncyk7XG5cbiAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlbHQsIGZ1bmN0aW9uIChlbCkge1xuXG4gICAgICAgICAgICB2YXIgdHdlZXQgPSBlbC5pbm5lckhUTUwsXG4gICAgICAgICAgICAgICAgc2VhcmNobGluaywgLy9zZWFyY2ggbGluayBmb3IgaGFzaHRhZ3NcbiAgICAgICAgICAgICAgICBsaW5rLCAvL2h0bWwgPGE+IHRhZ1xuICAgICAgICAgICAgICAgIHVybCwgLy91cmwgdG8gaGFzaHRhZ3Mgc2VhcmNoXG5cblxuICAgICAgICAgICAgLy9yZWdleFxuICAgICAgICAgICAgICAgIHJlZ2V4VXJsID0gLyhmfGh0KXRwcz86XFwvXFwvKFteXFxzXFx0XFxyXFxuPF0qW15cXHNcXHRcXHJcXG48KSpfLFxcLl0pL2csIC8vcmVnZXggZm9yIHVybHNcbiAgICAgICAgICAgICAgICByZWdleFVzZXIgPSAvXFxCQChbYS16QS1aMC05X10rKS9nLCAvL3JlZ2V4IGZvciBAdXNlcnNcbiAgICAgICAgICAgICAgICByZWdleEhhc2h0YWcgPSAvXFxCKCNbw6Etw7rDgS3DmsOkLcO8w4Qtw5xhLXpBLVowLTlfXSspL2c7IC8vcmVnZXggZm9yICNoYXNodGFnc1xuXG4gICAgICAgICAgICAvL0hhc2h0YWcgU2VhcmNoIGxpbmtcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLnNlYXJjaFdpdGhIYXNodGFncykge1xuICAgICAgICAgICAgICAgIC8vdGhpcyBpcyB0aGUgc2VhcmNoIHdpdGggaGFzaHRhZ1xuICAgICAgICAgICAgICAgIHNlYXJjaGxpbmsgPSBcImh0dHBzOi8vdHdpdHRlci5jb20vaGFzaHRhZy9cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIGEgbW9yZSBnbG9iYWwgc2VhcmNoIGluY2x1ZGluZyBoYXNodGFncyBhbmQgdGhlIHdvcmQgaXRzZWxmXG4gICAgICAgICAgICAgICAgc2VhcmNobGluayA9IFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9zZWFyY2g/cT1cIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy90dXJuIFVSTFMgaW4gdGhlIHR3ZWV0IGludG8uLi4gd29ya2luZyB1cmxzXG4gICAgICAgICAgICBpZiAocGFyYW1ldGVycy5wYXJzZVVybHMpIHtcbiAgICAgICAgICAgICAgICB0d2VldCA9IHR3ZWV0LnJlcGxhY2UocmVnZXhVcmwsIGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgICAgICAgICAgbGluay5ocmVmID0gdXJsO1xuICAgICAgICAgICAgICAgICAgICBsaW5rLmNsYXNzTGlzdC5hZGQocGFyYW1ldGVycy51cmxDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgIGxpbmsuaW5uZXJUZXh0ID0gdXJsO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1cmwucmVwbGFjZSh1cmwsIGxpbmsub3V0ZXJIVE1MKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy90dXJuIEB1c2VycyBpbiB0aGUgdHdlZXQgaW50by4uLiB3b3JraW5nIHVybHNcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLnBhcnNlVXNlcnMpIHtcbiAgICAgICAgICAgICAgICB0d2VldCA9IHR3ZWV0LnJlcGxhY2UocmVnZXhVc2VyLCBmdW5jdGlvbiAodXNlcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXNlck9ubHkgPSB1c2VyLnNsaWNlKDEpO1xuXG4gICAgICAgICAgICAgICAgICAgIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICAgICAgICAgIGxpbmsuaHJlZiA9ICdodHRwOi8vdHdpdHRlci5jb20vJyArIHVzZXJPbmx5O1xuICAgICAgICAgICAgICAgICAgICBsaW5rLmNsYXNzTGlzdC5hZGQocGFyYW1ldGVycy51c2VyQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICBsaW5rLmlubmVyVGV4dCA9IHVzZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXIucmVwbGFjZSh1c2VyLCBsaW5rLm91dGVySFRNTCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vdHVybiAjaGFzaHRhZ3MgaW4gdGhlIHR3ZWV0IGludG8uLi4gd29ya2luZyB1cmxzXG4gICAgICAgICAgICBpZiAocGFyYW1ldGVycy5wYXJzZUhhc2h0YWdzKSB7XG4gICAgICAgICAgICAgICAgdHdlZXQgPSB0d2VldC5yZXBsYWNlKHJlZ2V4SGFzaHRhZywgZnVuY3Rpb24gKGhhc2h0YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc2h0YWdPbmx5ID0gaGFzaHRhZy5zbGljZSgxKTtcblxuICAgICAgICAgICAgICAgICAgICB1cmwgPSBzZWFyY2hsaW5rICsgaGFzaHRhZ09ubHk7XG4gICAgICAgICAgICAgICAgICAgIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICAgICAgICAgIGxpbmsuaHJlZiA9IHVybDtcbiAgICAgICAgICAgICAgICAgICAgbGluay5jbGFzc0xpc3QuYWRkKHBhcmFtZXRlcnMuaGFzaHRhZ0NsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgbGluay5pbm5lclRleHQgPSBoYXNodGFnO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoYXNodGFnLnJlcGxhY2UoaGFzaHRhZywgbGluay5vdXRlckhUTUwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3RoZW4sIGl0IGluamVjdCB0aGUgbGFzdCB2YXIgaW50byB0aGUgZWxlbWVudCBjb250YWluaW5nIHRoZSB0d2VldFxuICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gdHdlZXQ7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBleHBvcnRzLnR3ZWV0UGFyc2VyID0gdHdlZXRQYXJzZXI7XG59KHdpbmRvdykpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9