/*!
 * jquery Tweet Parser v1.3.1
 * Parse an element containing a tweet and turn URLS, @user & #hashtags into urls
 * MIT License
 * by Vincent Loy
 * http://vincent-loy.fr
 */
!function(t){"use strict";t.fn.tweetParser=function(s){var a={urlClass:"tweet_link",userClass:"tweet_user",hashtagClass:"hashtag",target:"_blank",searchWithHashtags:!0,parseUsers:!0,parseHashtags:!0,parseUrls:!0},e=t.extend(a,s);return this.each(function(){var s,a,r,h,c,l=t(this).html(),n=/(^|\s|>)((f|ht)tps?:\/\/([^ \t\r\n<]*[^ \t\r\n\<)*_,\.]))/g,i=/\B@([a-zA-Z0-9_]+)/g,u=/\B(#[á-úÁ-Úä-üÄ-Üa-zA-Z0-9_]+)/g;s=e.searchWithHashtags?"https://twitter.com/hashtag/":"https://twitter.com/search?q=",e.parseUrls&&(l=l.replace(n,function(t,s,r){return a=s+'<a href="'+r+'" class="'+e.urlClass+'">'+r+"</a>",t.replace(t,a)})),e.parseUsers&&(l=l.replace(i,function(t){return r=t.slice(1),a='<a href="http://twitter.com/'+r+'" class="'+e.userClass+'">'+t+"</a>",t.replace(t,a)})),e.parseHashtags&&(l=l.replace(u,function(t){return h=t.slice(1),c=s+h,a='<a href="'+c+'" class="'+e.hashtagClass+'">'+t+"</a>",t.replace(t,a)})),t(this).html(l),t(this).find("a").attr("target",e.target)})}}(jQuery);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS50d2VldFBhcnNlci5qcyJdLCJuYW1lcyI6WyIkIiwiZm4iLCJ0d2VldFBhcnNlciIsIm9wdGlvbnMiLCJkZWZhdXRzIiwidXJsQ2xhc3MiLCJ1c2VyQ2xhc3MiLCJoYXNodGFnQ2xhc3MiLCJ0YXJnZXQiLCJzZWFyY2hXaXRoSGFzaHRhZ3MiLCJwYXJzZVVzZXJzIiwicGFyc2VIYXNodGFncyIsInBhcnNlVXJscyIsInBhcmFtZXRlcnMiLCJleHRlbmQiLCJ0aGlzIiwiZWFjaCIsInNlYXJjaGxpbmsiLCJsaW5rIiwidXNlck9ubHkiLCJoYXNodGFnT25seSIsInVybCIsInR3ZWV0IiwiaHRtbCIsInJlZ2V4VXJsIiwicmVnZXhVc2VyIiwicmVnZXhIYXNodGFnIiwicmVwbGFjZSIsInAxIiwicDIiLCJ1c2VyIiwic2xpY2UiLCJoYXNodGFnIiwiZmluZCIsImF0dHIiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Q0FTQyxTQUFVQSxHQUNQLFlBRUFBLEdBQUVDLEdBQUdDLFlBQWMsU0FBVUMsR0FFekIsR0FBSUMsSUFDSUMsU0FBWSxhQUNaQyxVQUFhLGFBQ2JDLGFBQWdCLFVBQ2hCQyxPQUFVLFNBQ1ZDLG9CQUFzQixFQUN0QkMsWUFBYyxFQUNkQyxlQUFpQixFQUNqQkMsV0FBYSxHQUVqQkMsRUFBYWIsRUFBRWMsT0FBT1YsRUFBU0QsRUFHbkMsT0FBT1ksTUFBS0MsS0FBSyxXQUdiLEdBQ0lDLEdBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBTEFDLEVBQVF0QixFQUFFZSxNQUFNUSxPQU9oQkMsRUFBVyw2REFDWEMsRUFBWSxzQkFDWkMsRUFBZSxpQ0FLZlQsR0FGQUosRUFBV0osbUJBRUUsK0JBR0EsZ0NBSWJJLEVBQVdELFlBQ1hVLEVBQVFBLEVBQU1LLFFBQVFILEVBQVUsU0FBVUgsRUFBS08sRUFBSUMsR0FFL0MsTUFEQVgsR0FBT1UsRUFBSyxZQUFjQyxFQUFLLFlBQWNoQixFQUFXUixTQUFXLEtBQU93QixFQUFLLE9BQ3hFUixFQUFJTSxRQUFRTixFQUFLSCxNQUs1QkwsRUFBV0gsYUFDWFksRUFBUUEsRUFBTUssUUFBUUYsRUFBVyxTQUFVSyxHQUd2QyxNQUZBWCxHQUFXVyxFQUFLQyxNQUFNLEdBQ3RCYixFQUFPLCtCQUFpQ0MsRUFBVyxZQUFjTixFQUFXUCxVQUFZLEtBQU93QixFQUFPLE9BQy9GQSxFQUFLSCxRQUFRRyxFQUFNWixNQUs5QkwsRUFBV0YsZ0JBQ1hXLEVBQVFBLEVBQU1LLFFBQVFELEVBQWMsU0FBVU0sR0FJMUMsTUFIQVosR0FBY1ksRUFBUUQsTUFBTSxHQUM1QlYsRUFBTUosRUFBYUcsRUFDbkJGLEVBQU8sWUFBY0csRUFBTSxZQUFjUixFQUFXTixhQUFlLEtBQU95QixFQUFVLE9BQzdFQSxFQUFRTCxRQUFRSyxFQUFTZCxNQUt4Q2xCLEVBQUVlLE1BQU1RLEtBQUtELEdBR2J0QixFQUFFZSxNQUFNa0IsS0FBSyxLQUFLQyxLQUFLLFNBQVVyQixFQUFXTCxZQUl0RDJCIiwiZmlsZSI6ImpxdWVyeS50d2VldFBhcnNlci5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGpxdWVyeSBUd2VldCBQYXJzZXIgdjEuMy4xXG4gKiBQYXJzZSBhbiBlbGVtZW50IGNvbnRhaW5pbmcgYSB0d2VldCBhbmQgdHVybiBVUkxTLCBAdXNlciAmICNoYXNodGFncyBpbnRvIHVybHNcbiAqIE1JVCBMaWNlbnNlXG4gKiBieSBWaW5jZW50IExveVxuICogaHR0cDovL3ZpbmNlbnQtbG95LmZyXG4gKi9cblxuLypnbG9iYWwgJCwgalF1ZXJ5Ki9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgJC5mbi50d2VldFBhcnNlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cbiAgICAgICAgdmFyIGRlZmF1dHMgPSB7XG4gICAgICAgICAgICAgICAgXCJ1cmxDbGFzc1wiOiBcInR3ZWV0X2xpbmtcIixcbiAgICAgICAgICAgICAgICBcInVzZXJDbGFzc1wiOiBcInR3ZWV0X3VzZXJcIixcbiAgICAgICAgICAgICAgICBcImhhc2h0YWdDbGFzc1wiOiBcImhhc2h0YWdcIixcbiAgICAgICAgICAgICAgICBcInRhcmdldFwiOiBcIl9ibGFua1wiLFxuICAgICAgICAgICAgICAgIFwic2VhcmNoV2l0aEhhc2h0YWdzXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJwYXJzZVVzZXJzXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJwYXJzZUhhc2h0YWdzXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJwYXJzZVVybHNcIjogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhcmFtZXRlcnMgPSAkLmV4dGVuZChkZWZhdXRzLCBvcHRpb25zKTtcblxuXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAvL2NvbnRhaW4gdGhlIHR3ZWV0XG4gICAgICAgICAgICB2YXIgdHdlZXQgPSAkKHRoaXMpLmh0bWwoKSxcbiAgICAgICAgICAgICAgICBzZWFyY2hsaW5rLCAvL3NlYXJjaCBsaW5rIGZvciBoYXNodGFnXG4gICAgICAgICAgICAgICAgbGluaywgLy9odG1sIDxhPiB0YWdcbiAgICAgICAgICAgICAgICB1c2VyT25seSwgLy91c2VycyBvbiB0d2VldFxuICAgICAgICAgICAgICAgIGhhc2h0YWdPbmx5LCAvL2hhc2h0YWdzIG9uIHR3ZWV0XG4gICAgICAgICAgICAgICAgdXJsLCAvL3VybCB0byBoYXNodGFnIHNlYXJjaFxuICAgICAgICAgICAgLy9yZWdleFxuICAgICAgICAgICAgICAgIHJlZ2V4VXJsID0gLyhefFxcc3w+KSgoZnxodCl0cHM/OlxcL1xcLyhbXiBcXHRcXHJcXG48XSpbXiBcXHRcXHJcXG5cXDwpKl8sXFwuXSkpL2csIC8vcmVnZXggZm9yIHVybHNcbiAgICAgICAgICAgICAgICByZWdleFVzZXIgPSAvXFxCQChbYS16QS1aMC05X10rKS9nLCAvL3JlZ2V4IGZvciBAdXNlcnNcbiAgICAgICAgICAgICAgICByZWdleEhhc2h0YWcgPSAvXFxCKCNbw6Etw7rDgS3DmsOkLcO8w4Qtw5xhLXpBLVowLTlfXSspL2c7IC8vcmVnZXggZm9yICNoYXNodGFnc1xuXG4gICAgICAgICAgICAvL0hhc2h0YWcgU2VhcmNoIGxpbmtcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLnNlYXJjaFdpdGhIYXNodGFncykge1xuICAgICAgICAgICAgICAgIC8vdGhpcyBpcyB0aGUgc2VhcmNoIHdpdGggaGFzaHRhZ1xuICAgICAgICAgICAgICAgIHNlYXJjaGxpbmsgPSBcImh0dHBzOi8vdHdpdHRlci5jb20vaGFzaHRhZy9cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIGEgbW9yZSBnbG9iYWwgc2VhcmNoIGluY2x1ZGluZyBoYXNodGFncyBhbmQgdGhlIHdvcmQgaXRzZWxmXG4gICAgICAgICAgICAgICAgc2VhcmNobGluayA9IFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9zZWFyY2g/cT1cIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy90dXJuIFVSTFMgaW4gdGhlIHR3ZWV0IGludG8uLi4gd29ya2luZyB1cmxzXG4gICAgICAgICAgICBpZiAocGFyYW1ldGVycy5wYXJzZVVybHMpIHtcbiAgICAgICAgICAgICAgICB0d2VldCA9IHR3ZWV0LnJlcGxhY2UocmVnZXhVcmwsIGZ1bmN0aW9uICh1cmwsIHAxLCBwMikge1xuICAgICAgICAgICAgICAgICAgICBsaW5rID0gcDEgKyAnPGEgaHJlZj1cIicgKyBwMiArICdcIiBjbGFzcz1cIicgKyBwYXJhbWV0ZXJzLnVybENsYXNzICsgJ1wiPicgKyBwMiArICc8L2E+JztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVybC5yZXBsYWNlKHVybCwgbGluayk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vdHVybiBAdXNlcnMgaW4gdGhlIHR3ZWV0IGludG8uLi4gd29ya2luZyB1cmxzXG4gICAgICAgICAgICBpZiAocGFyYW1ldGVycy5wYXJzZVVzZXJzKSB7XG4gICAgICAgICAgICAgICAgdHdlZXQgPSB0d2VldC5yZXBsYWNlKHJlZ2V4VXNlciwgZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlck9ubHkgPSB1c2VyLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgICAgICBsaW5rID0gJzxhIGhyZWY9XCJodHRwOi8vdHdpdHRlci5jb20vJyArIHVzZXJPbmx5ICsgJ1wiIGNsYXNzPVwiJyArIHBhcmFtZXRlcnMudXNlckNsYXNzICsgJ1wiPicgKyB1c2VyICsgJzwvYT4nO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlci5yZXBsYWNlKHVzZXIsIGxpbmspO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3R1cm4gI2hhc2h0YWdzIGluIHRoZSB0d2VldCBpbnRvLi4uIHdvcmtpbmcgdXJsc1xuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMucGFyc2VIYXNodGFncykge1xuICAgICAgICAgICAgICAgIHR3ZWV0ID0gdHdlZXQucmVwbGFjZShyZWdleEhhc2h0YWcsIGZ1bmN0aW9uIChoYXNodGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhc2h0YWdPbmx5ID0gaGFzaHRhZy5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgdXJsID0gc2VhcmNobGluayArIGhhc2h0YWdPbmx5O1xuICAgICAgICAgICAgICAgICAgICBsaW5rID0gJzxhIGhyZWY9XCInICsgdXJsICsgJ1wiIGNsYXNzPVwiJyArIHBhcmFtZXRlcnMuaGFzaHRhZ0NsYXNzICsgJ1wiPicgKyBoYXNodGFnICsgJzwvYT4nO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGFzaHRhZy5yZXBsYWNlKGhhc2h0YWcsIGxpbmspO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3RoZW4sIGl0IGluamVjdCB0aGUgbGFzdCB2YXIgaW50byB0aGUgZWxlbWVudCBjb250YWluaW5nIHRoZSB0d2VldFxuICAgICAgICAgICAgJCh0aGlzKS5odG1sKHR3ZWV0KTtcblxuICAgICAgICAgICAgLy9hZGQgdGFyZ2V0IGF0dHJpYnV0ZSB0byBhbGwgdXJsc1xuICAgICAgICAgICAgJCh0aGlzKS5maW5kKFwiYVwiKS5hdHRyKFwidGFyZ2V0XCIsIHBhcmFtZXRlcnMudGFyZ2V0KTtcblxuICAgICAgICB9KTtcbiAgICB9O1xufShqUXVlcnkpKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==